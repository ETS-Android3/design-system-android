/// Copyright (c) 2015-present, salesforce.com, inc. All rights reserved
/// Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license

package com.salesforce.designsystem;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Typeface;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;

/**
 * Utility for generating Bitmaps from SLDS icons.
 */

public abstract class Icons {

    public static Bitmap getBitmap(Context context, ActionIcons icon, int size) {
        return getBitmap(context, icon, size, context.getResources().getColor(R.color.slds_color_text_icon_default));
    }

    public static Drawable getDrawable(Context context, ActionIcons icon, int size) {
        return new BitmapDrawable(context.getResources(), getBitmap(context, icon, size));
    }

    public static Bitmap getBitmap(Context context, ActionIcons icon, int size, int color) {
        Bitmap bmp = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(bmp);

        drawIconGlyph(context, icon.value, size, canvas, color);

        return bmp;
    }

    public static Drawable getDrawable(Context context, ActionIcons icon, int size, int color) {
        return new BitmapDrawable(context.getResources(), getBitmap(context, icon, size, color));
    }

    public static Bitmap getBitmap(Context context, CustomIcons icon, int size) {
        return getBitmap(context, icon, size, context.getResources().getColor(R.color.slds_color_text_icon_default));
    }

    public static Drawable getDrawable(Context context, CustomIcons icon, int size) {
        return new BitmapDrawable(context.getResources(), getBitmap(context, icon, size));
    }

    public static Bitmap getBitmap(Context context, CustomIcons icon, int size, int color) {
        Bitmap bmp = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(bmp);

        drawIconGlyph(context, icon.value, size, canvas, color);

        return bmp;
    }

    public static Drawable getDrawable(Context context, CustomIcons icon, int size, int color) {
        return new BitmapDrawable(context.getResources(), getBitmap(context, icon, size, color));
    }

    public static Bitmap getBitmap(Context context, StandardIcons icon, int size) {
        return getBitmap(context, icon, size, context.getResources().getColor(R.color.slds_color_text_icon_default));
    }

    public static Drawable getDrawable(Context context, StandardIcons icon, int size) {
        return new BitmapDrawable(context.getResources(), getBitmap(context, icon, size));
    }

    public static Bitmap getBitmap(Context context, StandardIcons icon, int size, int color) {
        Bitmap bmp = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(bmp);

        drawIconGlyph(context, icon.value, size, canvas, color);

        return bmp;
    }

    public static Drawable getDrawable(Context context, StandardIcons icon, int size, int color) {
        return new BitmapDrawable(context.getResources(), getBitmap(context, icon, size, color));
    }

    public static Bitmap getBitmap(Context context, UtilityIcons icon, int size) {
        return getBitmap(context, icon, size, context.getResources().getColor(R.color.slds_color_text_icon_default));
    }

    public static Drawable getDrawable(Context context, UtilityIcons icon, int size) {
        return new BitmapDrawable(context.getResources(), getBitmap(context, icon, size));
    }

    public static Bitmap getBitmap(Context context, UtilityIcons icon, int size, int color) {
        Bitmap bmp = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(bmp);

        drawIconGlyph(context, icon.value, size, canvas, color);

        return bmp;
    }

    public static Drawable getDrawable(Context context, UtilityIcons icon, int size, int color) {
        return new BitmapDrawable(context.getResources(), getBitmap(context, icon, size, color));
    }

    private static void drawIconGlyph(Context context, String iconChar, int size, Canvas canvas, int color) {
        Paint textPaint = new Paint();
        textPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
        textPaint.setTextAlign(Paint.Align.CENTER);
        textPaint.setColor(color);
        textPaint.setTextSize(size);
        textPaint.setTypeface(Typeface.createFromAsset(
                context.getResources().getAssets(), "SalesforceDesignSystemIcons.ttf"));
        float y = (size / 2.0f) - ((textPaint.descent() + textPaint.ascent()) / 2.0f);
        canvas.drawText(iconChar, (size / 2.0f), y, textPaint);
    }
{% for type, iconSet in icons %}
    public enum {{type | capitalize}}Icons {
    {%- set comma = joiner() -%}
    {%- for icon in iconSet -%}
        {{ comma() }}
        {{ icon.name }} ("\u{{ icon.unicode }}")
    {%- endfor -%};

        final String value;
        {{ type | capitalize }}Icons(String value) { this.value = value; }
    }
{% endfor %}

}
